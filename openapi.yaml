openapi: 3.0.0
info:
  title: Books API Overview
  description: |
    A sample API for managing books. This API allows you to list, retrieve, create, update, and delete books.
  version: "1.0.0"
servers:
  - url: https://api.example.com/v1
paths:
  /books:
    get:
      summary: List all books
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      summary: Get book details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully.
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Book Title
        author:
          type: string
          example: Author Name
        published:
          type: string
          format: date
          example: 2025-07-15
    NewBook:
      type: object
      required:
        - title
        - author
        - published
      properties:
        title:
          type: string
          example: New Book
        author:
          type: string
          example: Author Name
        published:
          type: string
          format: date
          example: 2025-07-15
    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: Updated Title
        author:
          type: string
          example: Updated Author
        published:
          type: string
          format: date
          example: 2025-07-15
    Error:
      type: object
      properties:
        error:
          type: string
          example: Book not found
securitySchemes:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: Authorization
security:
  - ApiKeyAuth: []
